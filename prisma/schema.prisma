// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  accountId         String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  sessionId    String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String       @id @default(cuid())
  name           String?
  email          String?      @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  cartId         String?      @unique
  accounts       Account[]
  sessions       Session[]
  userCoupons    UserCoupon[]
  cart           Cart?
  Point          Point?
  Order          Order[]
}

model Order {
  orderId    String      @id
  userId     String
  paymentKey String?
  orderName  String
  receiptUrl String?
  method     String?
  amount     Float
  createdAt  DateTime    @default(now())
  state      String      @default("대기중")
  user       User        @relation(fields: [userId], references: [id])
  OrderForm  OrderForm[]
}

model OrderForm {
  orderFormId    String @id @default(cuid())
  orderId        String
  name           String
  phone          String
  email          String
  recipient      String
  recipientPhone String
  postcode       String
  address        String
  detailAddress  String
  deliveryMemo   String

  initialPrice  Float
  shippingCost  Float?
  applyCoupon   String?
  pointDiscount Float?
  finalPrice    Float
  productsId    String[]

  accuralPoint Int

  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
}

model Point {
  pointId   String   @id @default(cuid())
  userId    String   @unique
  amount    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

enum CouponType {
  FIXED
  PERCENTAGE
}

model UserCoupon {
  userId   String
  couponId String
  user     User   @relation(fields: [userId], references: [id])
  coupon   Coupon @relation(fields: [couponId], references: [couponId])

  @@id([userId, couponId])
}

model Coupon {
  couponId    String       @id @default(cuid())
  code        String       @unique
  discount    Float
  type        CouponType
  expires     DateTime
  createdAt   DateTime     @default(now())
  userCoupons UserCoupon[]
}

model Cart {
  cartId    String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
}

model CartItem {
  cartItemId String   @id @default(cuid())
  cartId     String
  productId  String
  quantity   Int
  createdAt  DateTime @default(now())

  cart    Cart    @relation(fields: [cartId], references: [cartId])
  product Product @relation(fields: [productId], references: [productId])
}

model Product {
  productId   String   @id @default(cuid())
  name        String
  description String
  detail      String
  price       Float
  image       String
  category    String
  createdAt   DateTime @default(now())

  cartItems CartItem[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
